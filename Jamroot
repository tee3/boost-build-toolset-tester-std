import testing ;
import feature ;
import regex ;
import print ;

local std-cstd-values = c89 c90 c94 c9x c99 c11 ;
local std-cxxstd-values = c++98 c++03 c++0x c++11 c++1y c++14 c++1z ;

local std-cstd-no-stdc-version = c89 c90 gnu89 gnu90 ;

local std-prefixes = c gnu ;

for local s in [ feature.values <cstd> ]
{
  local sname = $(s) ;
  local name = main_cstd_$(sname).c ;

  explicit $(name) ;
  make $(name) : : @stdc-generate-main ;

  run $(name) : : : <cstd>$(s) ;
}

for local s in [ feature.values <cxxstd> ]
{
  local sname = [ regex.replace $(s) \\+ x ] ;
  local name = main_cxxstd_$(sname).cpp ;

  explicit $(name) ;
  make $(name) : : @stdcxx-generate-main ;

  run $(name) : : : <cxxstd>$(s) ;
}

for local s in [ feature.values <objcstd> ]
{
  local sname = $(s) ;
  local name = main_objcstd_$(sname).m ;

  explicit $(name) ;
  make $(name) : : @objc-generate-main ;

  run $(name) : : : <objcstd>$(s) ;
}

for local s in [ feature.values <objcxxstd> ]
{
  local sname = $(s) ;
  local name = main_objcxxstd_$(sname).mm ;

  explicit $(name) ;
  make $(name) : : @objcxx-generate-main ;

  run $(name) : : : <objcxxstd>$(s) ;
}

rule stdc-generate-main ( target : sources * : properties * )
{
  local std = [ feature.get-values <cstd> : $(properties) ] ;
  local body = [ stdc-version-body $(std) ] ;

  if $(body)
  {
    print.output $(target) ;

    print.text $(body) : true ;
  }
}

rule stdc-version-body ( std )
{
  local body = ;

  local prints = [ stdc-version-prints $(std) ] ;
  local checks = [ stdc-version-checks $(std) ] ;
  local prints-and-checks = $(prints) $(checks) ;

  if $(prints-and-checks)
  {
    body +=
"#include <stdio.h>

int
main ()
{
"
      ;
    body += $(prints-and-checks) ;
    body +=
"
  return 0;
}
"
      ;
  }

  return $(body) ;
}

rule stdc-version-prints ( std )
{
  local prints = ;

  prints +=
"#if defined (__STDC__)
   printf (\"__STDC__ = %d\\n\",__STDC__);
#endif
#if defined (__STDC_VERSION__)
   printf (\"__STDC_VERSION__ = %ldL\\n\",__STDC_VERSION__);
#endif
  "
    ;

  return $(prints) ;
}

rule stdc-version-checks ( std )
{
  local checks = ;

  checks +=
"#if ! defined (__STDC__)
   return 1;
#endif
"
    ;

  if $(std) in $(std-cstd-no-stdc-version)
  {
    checks +=
"#if defined (__STDC_VERSION__)
  return 1;
#endif
"
      ;
  }
  else if $(std) in $(std-cstd-values)
  {
    checks += [ stdc-modern-version-check $(std) ] ;
  }

  return $(checks) ;
}

rule stdc-modern-version-check ( std )
{
  local check = ;

  local value = [ stdc-stdc-version-value $(std) ] ;

  if $(value)
  {
    check =
"#if (__STDC_VERSION__ != $(value))
  return 1;
#endif
"
      ;
  }

  return $(check) ;
}

rule stdc-stdc-version-value ( std )
{
  local value = ;

  switch $(std)
  {
    case c94 : value = 199409L ;
    case c9x : value = 199901L ;
    case c99 : value = 199901L ;
    case c11 : value = 201112L ;
  }

  return $(value) ;
}

rule stdcxx-generate-main ( target : sources * : properties * )
{
  local std = [ feature.get-values <cxxstd> : $(properties) ] ;
  local body = [ stdcxx-version-body $(std) ] ;

  if $(body)
  {
    print.output $(target) ;

    print.text $(body) : true ;
  }
}

rule stdc-stdc-version-value ( std )
{
  local value = ;

  switch $(std)
  {
    case $(std-prefixes)94 : value = 199409L ;
    case $(std-prefixes)9x : value = 199901L ;
    case $(std-prefixes)99 : value = 199901L ;
    case $(std-prefixes)11 : value = 201112L ;
  }

  return $(value) ;
}

rule stdcxx-generate-main ( target : sources * : properties * )
{
  local std = [ feature.get-values <cxxstd> : $(properties) ] ;
  local body = [ stdcxx-version-body $(std) ] ;

  if $(body)
  {
    print.output $(target) ;

    print.text $(body) : true ;
  }
}

rule stdcxx-version-body ( std )
{
  local body = ;

  local prints = [ stdcxx-version-prints $(std) ] ;
  local checks = [ stdcxx-cplusplus-checks $(std) ] ;
  local prints-and-checks = $(prints) $(checks) ;

  if $(prints-and-checks)
  {
    body +=
"#include <iostream>

int
main ()
{
"
      ;
    body += $(prints-and-checks) ;
    body +=
"
  return 0;
}
"
      ;
  }

  return $(body) ;
}

rule stdcxx-version-prints ( std )
{
  local prints = ;

  prints +=
"#if defined (__cplusplus)
   std::cout << \"__cplusplus = \" << __cplusplus << \"L\\n\";
#endif
"
    ;

  return $(prints) ;
}

rule stdcxx-cplusplus-checks ( std )
{
  local checks = ;

  checks +=
"#if ! defined (__cplusplus)
   return 1;
#endif
"
    ;

  checks += [ stdcxx-cplusplus-check $(std) ] ;

  return $(checks) ;
}

rule stdcxx-cplusplus-check ( std )
{
  local check = ;

  local value = [ stdcxx-cplusplus-value $(std) ] ;

  if $(value)
  {
    check =
"
#if (__cplusplus != $(value))
  return 1;
#endif
"
      ;
  }

  return $(check) ;
}

rule stdcxx-cplusplus-value ( std )
{
  local value = ;

  switch $(std)
  {
    case $(std-prefixes)++98 : value = 199711L ;
    case $(std-prefixes)++03 : value = 199711L ;
    case $(std-prefixes)++0x : value = 201103L ;
    case $(std-prefixes)++11 : value = 201103L ;
    case $(std-prefixes)++1y : value = 201402L ;
    case $(std-prefixes)++14 : value = 201402L ;
    case $(std-prefixes)++1z : value = 201406L ;
  }

  return $(value) ;
}

# @todo this currently just generates a C file with an Objective-C
# extension.
rule objc-generate-main ( target : sources * : properties * )
{
  local std = [ feature.get-values <objcstd> : $(properties) ] ;
  local body = [ stdc-version-body $(std) ] ;

  if $(body)
  {
    print.output $(target) ;

    print.text $(body) : true ;
  }
}

# @todo this currently just generates a C file with an Objective-C
# extension.
rule objcxx-generate-main ( target : sources * : properties * )
{
  local std = [ feature.get-values <objcxxstd> : $(properties) ] ;
  local body = [ stdcxx-version-body $(std) ] ;

  if $(body)
  {
    print.output $(target) ;

    print.text $(body) : true ;
  }
}
